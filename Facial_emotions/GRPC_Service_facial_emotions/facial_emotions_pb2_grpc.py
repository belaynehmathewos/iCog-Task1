# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import facial_emotions_pb2 as facial__emotions__pb2


class Emotion_recognizerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.image_processor = channel.stream_stream(
        '/facial_emotions.Emotion_recognizer/image_processor',
        request_serializer=facial__emotions__pb2.image_frame.SerializeToString,
        response_deserializer=facial__emotions__pb2.Rects.FromString,
        )
    self.emotion_classifier = channel.stream_stream(
        '/facial_emotions.Emotion_recognizer/emotion_classifier',
        request_serializer=facial__emotions__pb2.face_emotion.SerializeToString,
        response_deserializer=facial__emotions__pb2.Emotion.FromString,
        )
    self.StreamStreamEmotion = channel.stream_stream(
        '/facial_emotions.Emotion_recognizer/StreamStreamEmotion',
        request_serializer=facial__emotions__pb2.emoRequest.SerializeToString,
        response_deserializer=facial__emotions__pb2.emoReply.FromString,
        )


class Emotion_recognizerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def image_processor(self, request_iterator, context):
    """A bidirectional streaming
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def emotion_classifier(self, request_iterator, context):
    """
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamStreamEmotion(self, request_iterator, context):
    """
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_Emotion_recognizerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'image_processor': grpc.stream_stream_rpc_method_handler(
          servicer.image_processor,
          request_deserializer=facial__emotions__pb2.image_frame.FromString,
          response_serializer=facial__emotions__pb2.Rects.SerializeToString,
      ),
      'emotion_classifier': grpc.stream_stream_rpc_method_handler(
          servicer.emotion_classifier,
          request_deserializer=facial__emotions__pb2.face_emotion.FromString,
          response_serializer=facial__emotions__pb2.Emotion.SerializeToString,
      ),
      'StreamStreamEmotion': grpc.stream_stream_rpc_method_handler(
          servicer.StreamStreamEmotion,
          request_deserializer=facial__emotions__pb2.emoRequest.FromString,
          response_serializer=facial__emotions__pb2.emoReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'facial_emotions.Emotion_recognizer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
